import json
from datetime import datetime


# Lista global para armazenar simula√ß√µes
historico_simulacoes = []

# Fun√ß√£o para carregar o hist√≥rico de simula√ß√µes a partir de um arquivo JSON
def carregar_historico():
    try:
        with open("historico_simulacoes.json", "r") as f:
            global historico_simulacoes
            historico_simulacoes = json.load(f)
    except FileNotFoundError:
        # Arquivo n√£o encontrado, significa que n√£o h√° hist√≥rico salvo
        print("üìÇ Nenhum hist√≥rico de simula√ß√£o encontrado. Iniciando um novo hist√≥rico.")

# Fun√ß√£o para salvar o hist√≥rico de simula√ß√µes em um arquivo JSON
def salvar_historico():
    with open("historico_simulacoes.json", "w") as f:
        json.dump(historico_simulacoes, f, indent=4)
    print("‚úÖ Hist√≥rico de simula√ß√µes salvo com sucesso!")

# Fun√ß√£o para salvar o resultado de uma simula√ß√£o no hist√≥rico
def salvar_simulacao(historico_simulacoes, team_a, team_b, resultado, gols_a, gols_b):
    # Aqui voc√™ deve salvar os dados, por exemplo, em um arquivo ou em uma lista
    # Exemplo b√°sico de como poderia ser feita a grava√ß√£o:
    simulacao = {
        'time_a': team_a.name,
        'time_b': team_b.name,
        'resultado': resultado,
        'gols_a': gols_a,
        'gols_b': gols_b,
    }
    historico_simulacoes.append(simulacao)
    print("‚úÖ Simula√ß√£o salva com sucesso!")
    
# Fun√ß√£o para visualizar o hist√≥rico de simula√ß√µes com a op√ß√£o de ordenar
def visualizar_historico(ordem="desc"):
    """
    Exibe o hist√≥rico de simula√ß√µes, ordenando por data, se desejado.
    """
    if not historico_simulacoes:
        print("\nüìú Nenhum hist√≥rico de simula√ß√£o dispon√≠vel.")
        return

    # Ordena o hist√≥rico por data (decrescente ou crescente)
    historico_simulacoes_sorted = sorted(historico_simulacoes, key=lambda x: x["Data"], reverse=(ordem=="desc"))

    print("\nüìú Hist√≥rico de Simula√ß√µes:")
    print(f"{'Data':<20} {'Time A':<20} {'FTHG':<10} {'FTAG':<20} {'FTAG':<10} {'Resultado':<15}")
    for sim in historico_simulacoes_sorted:
        print(f"{sim['Data']:<20} {sim['Time A']:<20} {sim['FTHG']:<10} {sim['FTAG']:<20} {sim[' FTAG ']:<10} {sim['Resultado']:<15}")

# Fun√ß√£o para remover uma simula√ß√£o espec√≠fica
def remover_simulacao(index):
    """
    Remove uma simula√ß√£o do hist√≥rico com base no √≠ndice.
    """
    try:
        simulacao_removida = historico_simulacoes.pop(index - 1)  # Ajuste para index 1-based
        salvar_historico()  # Salva a lista atualizada
        print(f"‚úÖ Simula√ß√£o '{simulacao_removida['Time A']} vs {simulacao_removida['Time B']}' removida.")
    except IndexError:
        print("‚ùå √çndice inv√°lido. N√£o foi poss√≠vel remover a simula√ß√£o.")

# Fun√ß√£o para editar uma simula√ß√£o existente
def editar_simulacao(index, novos_resultados):
    """
    Edita uma simula√ß√£o j√° salva no hist√≥rico.
    """
    try:
        simulacao = historico_simulacoes[index - 1]  # Ajuste para index 1-based
        simulacao['FTHG'] = novos_resultados['FTHG']
        simulacao['FTAG'] = novos_resultados['FTAG']
        simulacao['Resultado'] = novos_resultados['Resultado']
        salvar_historico()  # Salva as altera√ß√µes no arquivo
        print(f"‚úÖ Simula√ß√£o '{simulacao['Time A']} vs {simulacao['Time B']}' editada com sucesso.")
    except IndexError:
        print("‚ùå √çndice inv√°lido. N√£o foi poss√≠vel editar a simula√ß√£o.")

# Carregar hist√≥rico ao iniciar
carregar_historico()